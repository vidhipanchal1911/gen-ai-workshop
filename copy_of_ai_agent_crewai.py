# -*- coding: utf-8 -*-
"""Copy of AI_Agent_CrewAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-HtxdlVP_EIos2_-YFLgy2Xa8spCShZJ
"""

!pip install -qU crewai -q

import os

from google.colab import userdata
os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

from crewai import Agent, Task, Crew, Process

# Define the agents with specific roles
product_manager = Agent(
                          role='Product Manager',
                          goal='Define requirements for a cloud kitchen pizzeria website',
                          backstory="You are an experienced Product Manager skilled in defining clear and concise requirements for food business websites with a focus on user experience and conversion.",
                          verbose=True
                          )

web_developer = Agent(
              role='Web Developer',
              goal='Develop a website based on the provided requirements',
              backstory="You are a skilled web developer proficient in creating responsive, appealing, and functional websites for food businesses.",
              verbose=True
              )


# Define the tasks for each agent
task1 = Task(
              description="Define the key requirements and features for a cloud kitchen pizzeria website that sells healthy thin crust pizzas at affordable rates. Be specific and concise about pages needed, user journey, and key selling points to highlight.",
              expected_output="A clear and concise list of website requirements for the cloud kitchen pizzeria",
              agent=product_manager
              )


task2 = Task(
              description="Based on the provided requirements, develop the HTML, CSS, and JavaScript code for the cloud kitchen pizzeria website. Focus on responsive design, clear menu presentation, online ordering capabilities, and highlighting the health benefits and affordability of the thin crust pizzas.",
              expected_output="Complete front-end code for the pizzeria website",
              agent=web_developer
              )


# Instantiate your crew with a sequential process
crew = Crew(
            agents=[product_manager, web_developer],
            tasks=[task1, task2],
            verbose=True
            )

# Get your crew to work!
result = crew.kickoff()
print("######################")
print(result)

!pip install langchain_google_genai -q

# Define agents with specific roles and integrate the Gemini LLM
product_manager = Agent(
    role='Product Manager',
    goal='Define requirements for a cloud kitchen pizzeria website',
    backstory="You are an experienced Product Manager skilled in defining clear and concise requirements for food business websites with a focus on user experience and conversion.",
    llm=llm,  # Use Gemini LLM
    verbose=True
)

web_developer = Agent(
    role='Web Developer',
    goal='Develop a website based on the provided requirements',
    backstory="You are a skilled web developer proficient in creating responsive, appealing, and functional websites for food businesses.",
    llm=llm,  # Use Gemini LLM
    verbose=True
)

# Define tasks for each agent
task1 = Task(
    description="Define the key requirements and features for a cloud kitchen pizzeria website that sells healthy thin crust pizzas at affordable rates. Be specific and concise about pages needed, user journey, and key selling points to highlight.",
    expected_output="A clear and concise list of website requirements for the cloud kitchen pizzeria",
    agent=product_manager
)

task2 = Task(
    description="Based on the provided requirements, develop the HTML, CSS, and JavaScript code for the cloud kitchen pizzeria website. Focus on responsive design, clear menu presentation, online ordering capabilities, and highlighting the health benefits and affordability of the thin crust pizzas.",
    expected_output="Complete front-end code for the pizzeria website",
    agent=web_developer
)

# Instantiate your crew with a sequential process
crew = Crew(
    agents=[product_manager, web_developer],
    tasks=[task1, task2],
    verbose=True
)

# Get your crew to work!
result = crew.kickoff()
print("######################")
print(result)

# # Define persistent experts (AGENTS)
# designer = Agent(role="UX Designer", goal="Create intuitive user experiences")
# developer = Agent(role="Backend Developer", goal="Build secure, efficient systems")
# tester = Agent(role="QA Engineer", goal="Ensure software quality")

# # Define specific work items (TASKS)
# task1 = Task(description="Design the user registration flow", agent=designer)
# task2 = Task(description="Implement the registration API", agent=developer)
# task3 = Task(description="Write unit tests for the API", agent=developer)
# task4 = Task(description="Perform end-to-end testing", agent=tester)

!pip install -qU litellm langchain

import os
from crewai import Agent, Task, Crew
import litellm
from langchain_google_genai import ChatGoogleGenerativeAI

litellm.provider_info = {
       "google_palm": {
           "model_name": "models/gemini-2.0-flash-lite-001",  # Replace with your desired model name
           "api_key": os.environ.get("GOOGLE_API_KEY"),  # Ensure your API key is loaded
       }
   }

llm = ChatGoogleGenerativeAI(
       model="google_palm",  # Use "google_palm" as the model name for LiteLLM
       verbose=True,
       temperature=0.5,  # Adjust temperature as needed
       google_api_key=os.environ.get("GOOGLE_API_KEY"),  # Ensure your API key is loaded
   )

!pip install -qU litellm langchain langchain_google_genai
import os
from crewai import Agent, Task, Crew
import litellm
from langchain_google_genai import ChatGoogleGenerativeAI

# Configure LiteLLM to use Gemini
litellm.provider_info = {
    "google_palm": {
        "model_name": "models/gemini-2.0-flash-lite-001",  # Or your desired Gemini model
        "api_key": os.environ.get("GOOGLE_API_KEY"),
    }
}

# Initialize the Gemini LLM with LiteLLM
llm = ChatGoogleGenerativeAI(
    model="google_palm",  # Use the key from provider_info
    verbose=True,
    temperature=0.5,
    #google_api_key=os.environ.get("GOOGLE_API_KEY"),  # Already set in provider_info
)

# Define agents with specific roles and integrate the Gemini LLM
product_manager = Agent(
    role='Product Manager',
    goal='Define requirements for a cloud kitchen pizzeria website',
    backstory="You are an experienced Product Manager skilled in defining clear and concise requirements for food business websites with a focus on user experience and conversion.",
    llm=llm,  # Use Gemini LLM
    verbose=True
)

web_developer = Agent(
    role='Web Developer',
    goal='Develop a website based on the provided requirements',
    backstory="You are a skilled web developer proficient in creating responsive, appealing, and functional websites for food businesses.",
    llm=llm,  # Use Gemini LLM
    verbose=True
)

# Define tasks for each agent
task1 = Task(
    description="Define the key requirements and features for a cloud kitchen pizzeria website that sells healthy thin crust pizzas at affordable rates. Be specific and concise about pages needed, user journey, and key selling points to highlight.",
    expected_output="A clear and concise list of website requirements for the cloud kitchen pizzeria",
    agent=product_manager
)

task2 = Task(
    description="Based on the provided requirements, develop the HTML, CSS, and JavaScript code for the cloud kitchen pizzeria website. Focus on responsive design, clear menu presentation, online ordering capabilities, and highlighting the health benefits and affordability of the thin crust pizzas.",
    expected_output="Complete front-end code for the pizzeria website",
    agent=web_developer
)

# Instantiate your crew with a sequential process
crew = Crew(
    agents=[product_manager, web_developer],
    tasks=[task1, task2],
    verbose=True
)

# Get your crew to work!
result = crew.kickoff()
print("######################")
print(result)